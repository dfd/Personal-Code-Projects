#tx$GrossLoadMWh <- rnorm(100)
# BM_G <- quantile(tx$GrossLoadMWh, probs = c(0.75)) # quartile
# BM_H <- quantile(tx$HeatInputMMBtu, probs = c(0.75))
# BM_S <- quantile(tx$SO2tons, probs = c(0.5))
# BM_C <- quantile(tx$CO2shorttons, probs = c(0.5))
# BM_N <- quantile(tx$NOxtons, probs = c(0.5))
# tx <- as.data.frame(tx)
# tx %>%
#  group_by(Year)# %>%
#  quantile(GrossLoadMWh, c(0.75), na.rm=TRUE)
# tx
# tx_req <- filter(tx, Year)
tx <- filter(MyData.df, State=="TX", !is.na(GrossLoadMWh), !is.na(HeatInputMMBtu), !is.na(CO2shorttons), !is.na(SO2tons), !is.na(NOxtons))
mean_tx <- tx %>%
group_by(Facility_Name) %>%
summarise(GrossLoadMWh = mean(GrossLoadMWh), HeatInputMMBtu = mean(HeatInputMMBtu), CO2shorttons = mean(CO2shorttons), SO2tons = mean(SO2tons), NOxtons = mean(NOxtons))
# chosen_tx <- mean_tx %>%
#   filter((HeatInputMMBtu>quantile(HeatInputMMBtu, probs = seq(0.75))[1]) & (GrossLoadMWh>quantile(GrossLoadMWh, probs = seq(0.75))[1]) & (((SO2tons<quantile(SO2tons, probs = seq(0.5))[1]))|((CO2shorttons<quantile(CO2shorttons, probs = seq(0.5))[1]))|((NOxtons<quantile(NOxtons, probs = seq(0.5))[1]))))
# chosen_tx <- mean_tx[(mean_tx$HeatInputMMBtu>quantile(mean_tx$HeatInputMMBtu, 0.75)) & (mean_tx$GrossLoadMWh>quantile(mean_tx$GrossLoadMWh, 0.75)) & ((mean_tx$CO2shorttons<quantile(mean_tx$CO2shorttons, 0.5)) | (mean_tx$SO2tons<quantile(mean_tx$SO2tons, 0.5)) | (mean_tx$NOxtons<quantile(mean_tx$NOxtons, 0.5))),]
chosen_tx <- mean_tx %>% filter((HeatInputMMBtu>quantile(HeatInputMMBtu, 0.75)) & (GrossLoadMWh>quantile(GrossLoadMWh, 0.75)) & ((SO2tons<quantile(SO2tons, 0.5)) |(CO2shorttons<quantile(CO2shorttons, 0.5))|(NOxtons<quantile(NOxtons, 0.5))))
#meantx <- aggregate(cbind(GrossLoadMWh, HeatInputMMBtu, CO2shorttons, SO2tons, NOxtons) ~ Facility_ID, data = tx, FUN = mean, #na.rm = TRUE)
#meantx <- with(tx, tapply(GrossLoadMWh, CO2shorttons, SO2tons, HeatInputMMBtu, NOxtons, FUN = mean))
#y_tx <- group_by(tx, Year) %>%
#  nest()
#y_tx <- tx %>%
#  group_by(Year) %>%
#  filter(((quantile(tx$GrossLoadMWh,probs = seq(/0.25,0.5,0.75,1)))>=0.75) & (quantile(tx$HeatInputMMBtu,probs = seq(0.25,0.5,0.75,1))>=0.75) & ((quantile(tx$SO2tons,probs = seq(0.25,0.5,0.75,1))<=0.5) | (quantile(tx$CO2shorttons,probs = seq(0.25,0.5,0.75,1))<=0.5) | (quantile(tx$NOxtons,probs = seq(0.25,0.5,0.75,1))<=0.75)))
# y_tx
#GrossLoad_r <- ntile(tx$GrossLoadMWh, 4)
#HeatInput_r <- ntile(tx$HeatInputMMBtu, 4)
#CO2_r <- ntile(tx$CO2shorttons, 4)
#SO2_r <- ntile(tx$SO2tons, 4)
#NOx_r <- ntile(tx$NOxtons, 4)
#add_column(tx, ntile(tx$HeatInputMMBtu, 4)) #, ntile(tx$HeatInputMMBtu), ntile(tx$CO2shorttons), ntile(tx$SO2tons), ntile(tx$NOxtons))
#tx %>%
# group_by(Year) %>%
#select(over(percent))
# tx <- gather(tx, key = "year", value = "GrossLoadMWh", "HeatInputMMBtu","SO2tons","CO2shorttons", "NOxtons")
# tx
#out <- select(tx, over(ntile(100), ws), df$hp, df$am)
#tx$GrossLoadMWh <- rnorm(100)
# BM_G <- quantile(tx$GrossLoadMWh, probs = c(0.75)) # quartile
# BM_H <- quantile(tx$HeatInputMMBtu, probs = c(0.75))
# BM_S <- quantile(tx$SO2tons, probs = c(0.5))
# BM_C <- quantile(tx$CO2shorttons, probs = c(0.5))
# BM_N <- quantile(tx$NOxtons, probs = c(0.5))
# tx <- as.data.frame(tx)
# tx %>%
#  group_by(Year)# %>%
#  quantile(GrossLoadMWh, c(0.75), na.rm=TRUE)
# tx
# tx_req <- filter(tx, Year)
chosen_tx
tx <- filter(MyData.df, State=="TX", !is.na(GrossLoadMWh), !is.na(HeatInputMMBtu), !is.na(CO2shorttons), !is.na(SO2tons), !is.na(NOxtons))
mean_tx <- tx %>%
group_by(Facility_Name) %>%
summarise(GrossLoadMWh = mean(GrossLoadMWh), HeatInputMMBtu = mean(HeatInputMMBtu), CO2shorttons = mean(CO2shorttons), SO2tons = mean(SO2tons), NOxtons = mean(NOxtons))
chosen_tx <- mean_tx %>% filter((HeatInputMMBtu>quantile(HeatInputMMBtu, 0.75)) & (GrossLoadMWh>quantile(GrossLoadMWh, 0.75)) & ((SO2tons<quantile(SO2tons, 0.5)) |(CO2shorttons<quantile(CO2shorttons, 0.5))|(NOxtons<quantile(NOxtons, 0.5))))
chosen_tx
Sub_MyData <- MyData.df[,c("GrossLoadMWh","HeatInputMMBtu","SO2tons","CO2shorttons","NOxtons")]
Sub_MyData %>%
group_by(MyData.df$Year) %>%
summarise_all(funs(sum), na.rm = TRUE)
GrossLoad2015 <-
filter(MyData.df, Year == 2015) %>%
arrange(desc(GrossLoadMWh)) %>%
slice(1:5)
GrossLoad2015[,c("Facility_ID","Facility_Name")]
New_subset <- filter(MyData.df, MyData.df$Facility_ID %in% GrossLoad2015$Facility_ID)
PlotData <- New_subset[,c("GrossLoadMWh","HeatInputMMBtu","SO2tons","NOxtons","CO2shorttons")] %>%
aggregate(by = list(New_subset$Year), FUN = sum, na.rm = TRUE)
PlotData
ggplot(data = PlotData, aes(x = Group.1)) + geom_line(aes(y = PlotData$GrossLoadMWh, colour = "GrossLoadMWh"))+ geom_line(aes(y = PlotData$HeatInputMMBtu, colour = "HeatInputMMBtu"))+ geom_line(aes(y = PlotData$SO2tons, colour = "SO2tons"))+ geom_line(aes(y = PlotData$NOxtons, colour = "NOxtons"))+ geom_line(aes(y = PlotData$CO2shorttons, colour = "CO2shorttons")) + scale_y_log10()
ggplot(data = PlotData, aes(x = Group.1, y = GrossLoadMWh)) + geom_point() + geom_path()
ggplot(data = PlotData, aes(x = Group.1, y = HeatInputMMBtu)) + geom_point() + geom_path() + labs(x = "Year")
ggplot(data = PlotData, aes(x = Group.1, y = SO2tons)) + geom_point() + geom_path()
ggplot(data = PlotData, aes(x = Group.1, y = NOxtons)) + geom_point() + geom_path()
ggplot(data = PlotData, aes(x = Group.1, y = CO2shorttons)) + geom_point() + geom_path()
#aggregate(New_subset[,c("GrossLoadMWh","HeatInputMMBtu","SO2tons","CO2shorttons","NOxtons")], by = #list(New_subset$Facility_Name), FUN = "sum", na.rm = TRUE)
GrossLoad2015 <-
filter(MyData.df, Year == 2015) %>%
arrange(desc(GrossLoadMWh)) %>%
slice(1:5)
GrossLoad2015[,c("Facility_ID","Facility_Name")]
New_subset <- filter(MyData.df, MyData.df$Facility_ID %in% GrossLoad2015$Facility_ID)
PlotData <- New_subset[,c("GrossLoadMWh","HeatInputMMBtu","SO2tons","NOxtons","CO2shorttons")] %>%
aggregate(by = list(New_subset$Year), FUN = sum, na.rm = TRUE)
PlotData
ggplot(data = PlotData, aes(x = Group.1)) + geom_line(aes(y = PlotData$GrossLoadMWh, colour = "GrossLoadMWh"))+ geom_line(aes(y = PlotData$HeatInputMMBtu, colour = "HeatInputMMBtu"))+ geom_line(aes(y = PlotData$SO2tons, colour = "SO2tons"))+ geom_line(aes(y = PlotData$NOxtons, colour = "NOxtons"))+ geom_line(aes(y = PlotData$CO2shorttons, colour = "CO2shorttons")) + scale_y_log10()
ggplot(data = PlotData, aes(x = Group.1, y = GrossLoadMWh)) + geom_point() + geom_path() + labs(x = "Year")
ggplot(data = PlotData, aes(x = Group.1, y = HeatInputMMBtu)) + geom_point() + geom_path() + labs(x = "Year")
ggplot(data = PlotData, aes(x = Group.1, y = SO2tons)) + geom_point() + geom_path() + labs(x = "Year")
ggplot(data = PlotData, aes(x = Group.1, y = NOxtons)) + geom_point() + geom_path() + labs(x = "Year")
ggplot(data = PlotData, aes(x = Group.1, y = CO2shorttons)) + geom_point() + geom_path() + labs(x = "Year")
#aggregate(New_subset[,c("GrossLoadMWh","HeatInputMMBtu","SO2tons","CO2shorttons","NOxtons")], by = #list(New_subset$Facility_Name), FUN = "sum", na.rm = TRUE)
Sub1_MyData <- filter(MyData.df[,c("EPARegion","GrossLoadMWh","HeatInputMMBtu","SO2tons","CO2shorttons","NOxtons")], MyData.df$Year == 2016)
Sub2_MyData <- Sub1_MyData[,c("GrossLoadMWh","HeatInputMMBtu","SO2tons","CO2shorttons","NOxtons")]
#sum(MyData.df$HeatInputMMBtu, na.rm = TRUE)
EPA_summary <- Sub2_MyData %>%
group_by(Sub1_MyData$EPARegion) %>%
summarise_all(funs(sum), na.rm = TRUE)
Chosen_EPA <- EPA_summary %>%
arrange(desc(GrossLoadMWh)) %>%
slice(1:5)
colnames(Chosen_EPA)[1] <- "EPARegion"
ggplot(data = Chosen_EPA, aes(x = reorder(EPARegion, -GrossLoadMWh), y = GrossLoadMWh)) + geom_col() + labs(x = "EPA Region")
ggplot(data = Chosen_EPA, aes(x = reorder(EPARegion, -GrossLoadMWh), y = HeatInputMMBtu)) + geom_col()+ labs(x = "EPA Region")
ggplot(data = Chosen_EPA, aes(x = reorder(EPARegion, -GrossLoadMWh), y = NOxtons)) + geom_col()+ labs(x = "EPA Region")
ggplot(data = Chosen_EPA, aes(x = reorder(EPARegion, -GrossLoadMWh), y = SO2tons)) + geom_col()+ labs(x = "EPA Region")
ggplot(data = Chosen_EPA, aes(x = reorder(EPARegion, -GrossLoadMWh), y = CO2shorttons)) + geom_col()+ labs(x = "EPA Region")
Sub3_MyData <- filter(MyData.df[,c("NERCRegion","GrossLoadMWh","HeatInputMMBtu","SO2tons","CO2shorttons","NOxtons")], MyData.df$Year == 2016)
Sub4_MyData <- Sub3_MyData[,c("GrossLoadMWh","HeatInputMMBtu","SO2tons","CO2shorttons","NOxtons")]
NERC_summary <- Sub4_MyData %>%
group_by(Sub3_MyData$NERCRegion) %>%
summarise_all(funs(sum), na.rm = TRUE) %>%
slice(1:10)
Chosen_NERC <- NERC_summary %>%
arrange(desc(GrossLoadMWh)) %>%
slice(1:5)
colnames(Chosen_NERC)[1] <- "NERCRegion"
ggplot(data = Chosen_NERC, aes(x = reorder(NERCRegion, -GrossLoadMWh), y = GrossLoadMWh)) + geom_col()+ labs(x = "NERC Region")
ggplot(data = Chosen_NERC, aes(x = reorder(NERCRegion, -GrossLoadMWh), y = HeatInputMMBtu)) + geom_col()+ labs(x = "NERC Region")
ggplot(data = Chosen_NERC, aes(x = reorder(NERCRegion, -GrossLoadMWh), y = NOxtons)) + geom_col()+ labs(x = "NERC Region")
ggplot(data = Chosen_NERC, aes(x = reorder(NERCRegion, -GrossLoadMWh), y = SO2tons)) + geom_col()+ labs(x = "NERC Region")
ggplot(data = Chosen_NERC, aes(x = reorder(NERCRegion, -GrossLoadMWh), y = CO2shorttons)) + geom_col()+ labs(x = "NERC Region")
Data_2016 <- MyData.df[,c("State","GrossLoadMWh","HeatInputMMBtu","SO2tons","CO2shorttons","NOxtons")] %>%
filter(MyData.df$Year == 2016)
Data_2016_sum <- Data_2016 %>%
group_by(State) %>%
summarise_all(funs(sum), na.rm = TRUE)
Data_2016_sum <- Data_2016_sum %>%
arrange(desc(GrossLoadMWh)) %>%
slice(1:20)
ggplot(data = Data_2016_sum, aes(x = reorder(State, -GrossLoadMWh), y = GrossLoadMWh)) + geom_col()+ labs(x = "State")
ggplot(data = Data_2016_sum, aes(x = reorder(State, -GrossLoadMWh), y = HeatInputMMBtu)) + geom_col()+ labs(x = "State")
ggplot(data = Data_2016_sum, aes(x = reorder(State, -GrossLoadMWh), y = SO2tons)) + geom_col()+ labs(x = "State")
ggplot(data = Data_2016_sum, aes(x = reorder(State, -GrossLoadMWh), y = NOxtons)) + geom_col()+ labs(x = "State")
ggplot(data = Data_2016_sum, aes(x = reorder(State, -GrossLoadMWh), y = CO2shorttons)) + geom_col()+ labs(x = "State")
Data_2016_group <- Data_2016 %>%
group_by(State) %>%
summarise_all(funs(mean), na.rm = TRUE)
Data_2016_group <- Data_2016_group %>%
arrange(desc(GrossLoadMWh)) %>%
slice(1:20)
ggplot(data = Data_2016_group, aes(x = reorder(State, -GrossLoadMWh), y = GrossLoadMWh)) + geom_col()+ labs(x = "State")
ggplot(data = Data_2016_group, aes(x = reorder(State, -GrossLoadMWh), y = HeatInputMMBtu)) + geom_col()+ labs(x = "State")
ggplot(data = Data_2016_group, aes(x = reorder(State, -GrossLoadMWh), y = SO2tons)) + geom_col()+ labs(x = "State")
ggplot(data = Data_2016_group, aes(x = reorder(State, -GrossLoadMWh), y = NOxtons)) + geom_col()+ labs(x = "State")
ggplot(data = Data_2016_group, aes(x = reorder(State, -GrossLoadMWh), y = CO2shorttons)) + geom_col()+ labs(x = "State")
geospat.df <- MyData.df[,c("State","Facility_ID","FacilityLongitude", "FacilityLatitude")]
geospat.df <- unique(geospat.df)      #to remove copies of the same facility
geoset <- inner_join(geospat.df,geospat.df, by = "State", copy = FALSE, suffix = c(".1",".2"))  #suffixes given to distinguish between two facilities
geoset <- filter(geoset, Facility_ID.1 != Facility_ID.2)
geoset <- mutate(geoset, dist_km := distGeo(matrix(c(FacilityLongitude.1,FacilityLatitude.1), ncol = 2),
matrix(c(FacilityLongitude.2,FacilityLatitude.2), ncol = 2))/1000) #distGeo function used to calculate distance in m. This was divided by 1000 to give distance in kilometers
geoset <- filter(geoset, dist_km != 0) #removing rows with facility distance equal to zero
geoset$dist_km <- as.numeric(geoset$dist_km)
gr_geoset <- geoset[,c("State","dist_km")] %>%
group_by(State) %>%
summarise_all(funs(mean), na.rm = TRUE)
no_plants <- aggregate(Facility_ID~State,new,length)
new_metric <- inner_join(gr_geoset, no_plants, by = "State")
new_metric <- mutate(new_metric, metric1 = new_metric$Facility_ID/new_metric$dist_km)
# normalize <- function(x) {
#     return ((x - min(x)) / (max(x) - min(x)))
# }
#
# new_metric <- mutate(new_metric, metric2 = normalize(new_metric$Facility_ID)/normalize(new_metric$dist_km))
new_metric_normalized <- inner_join(gr_geoset, no_plants, by = "State")
mu_dist <- mean(new_metric_normalized$dist_km)
sigma_dist   <- sqrt (var(new_metric_normalized$dist_km))
mu_no <- mean(new_metric_normalized$Facility_ID)
sigma_no   <- sqrt (var(new_metric_normalized$Facility_ID))
new_metric_normalized <- mutate(new_metric_normalized, metric1 = (new_metric_normalized$Facility_ID - mu_no)/sigma_no/(new_metric_normalized$dist_km-mu_dist)*sigma_dist)
arrange(new_metric,desc(metric1)) %>%
slice(1:3)
arrange(new_metric_normalized,desc(metric1)) %>%
slice(1:3)
View(no_plants)
View(no_plants)
setwd("C:/Users/Yash Kumar/Desktop/Studies/Fall 2017/Data Analytics/Assignments/Individual Data Assignment 4/HW4-Data To USE")
library(readr)
library(stringr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(geosphere)
library(MASS)
EPADownloademissionGathered <- read_csv("C:/Users/Yash Kumar/Desktop/Studies/Fall 2017/Data Analytics/Assignments/Individual Data Assignment 4/HW4-Data To USE/EPADownloademissionGathered.csv")
EPADownloademissionGathered[ EPADownloademissionGathered == "ThisIsAnotherMissingValue" | EPADownloademissionGathered == "ThisIsAMissingValue"] <- NA
EPADownloademissionGathered$attributeName <- gsub("[[:punct:]]","",EPADownloademissionGathered$attributeName)
names(EPADownloademissionGathered) <- c("UID","State","Facility_Name","Facility_ID","Program","Year","Attribute_Name","Attribute_Value")
MyData.df <- EPADownloademissionGathered[,2:8]
MyData.df <- spread(MyData.df, Attribute_Name, Attribute_Value)
unique(EPADownloademissionGathered$Attribute_Name)
MyData.df$EPARegion <- as.factor(MyData.df$EPARegion)
MyData.df$State <- as.factor(MyData.df$State)
MyData.df$Facility_Name <- as.factor(MyData.df$Facility_Name)
MyData.df$Facility_ID <- as.factor(MyData.df$Facility_ID)
MyData.df$Program <- as.factor(MyData.df$Program)
MyData.df$County <- as.factor(MyData.df$County)
MyData.df$NERCRegion <- as.factor(MyData.df$NERCRegion)
MyData.df$Year <- as.numeric(MyData.df$Year)
MyData.df$FacilityLatitude <- as.numeric(MyData.df$FacilityLatitude)
MyData.df$FacilityLongitude <- as.numeric(MyData.df$FacilityLongitude)
MyData.df$GrossLoadMWh <- as.numeric(MyData.df$GrossLoadMWh)
MyData.df$HeatInputMMBtu <- as.numeric(MyData.df$HeatInputMMBtu)
MyData.df$NOxtons <- as.numeric(MyData.df$NOxtons)
MyData.df$SO2tons <- as.numeric(MyData.df$SO2tons)
MyData.df$SteamLoad1000lb <- as.numeric(MyData.df$SteamLoad1000lb)
MyData.df$CO2shorttons <- as.numeric(MyData.df$CO2shorttons)
summary(MyData.df[,c("State","Facility_ID","GrossLoadMWh","SO2tons","NOxtons","CO2shorttons")])
unique(MyData.df$EPARegion[!is.na(MyData.df$EPARegion)]);
length(unique(MyData.df$EPARegion[!is.na(MyData.df$EPARegion)]))
unique(MyData.df$NERCRegion[!is.na(MyData.df$NERCRegion)])
length(unique(MyData.df$NERCRegion[!is.na(MyData.df$NERCRegion)]))
new <- distinct(MyData.df,Facility_ID, State)
num <- aggregate(Facility_ID~State,new,length)
arrange(num,desc(Facility_ID)) %>%
slice(1:3)
tx <- filter(MyData.df, State=="TX", !is.na(GrossLoadMWh), !is.na(HeatInputMMBtu), !is.na(CO2shorttons), !is.na(SO2tons), !is.na(NOxtons))
mean_tx <- tx %>%
group_by(Facility_Name) %>%
summarise(GrossLoadMWh = mean(GrossLoadMWh), HeatInputMMBtu = mean(HeatInputMMBtu), CO2shorttons = mean(CO2shorttons), SO2tons = mean(SO2tons), NOxtons = mean(NOxtons))
chosen_tx <- mean_tx %>% filter((HeatInputMMBtu>quantile(HeatInputMMBtu, 0.75)) & (GrossLoadMWh>quantile(GrossLoadMWh, 0.75)) & ((SO2tons<quantile(SO2tons, 0.5)) |(CO2shorttons<quantile(CO2shorttons, 0.5))|(NOxtons<quantile(NOxtons, 0.5))))
# Checking the appropriate quantiles
chosen_tx
Sub_MyData <- MyData.df[,c("GrossLoadMWh","HeatInputMMBtu","SO2tons","CO2shorttons","NOxtons")]
Sub_MyData %>%
group_by(MyData.df$Year) %>%
summarise_all(funs(sum), na.rm = TRUE)
GrossLoad2015 <-
filter(MyData.df, Year == 2015) %>%
arrange(desc(GrossLoadMWh)) %>%
slice(1:5)
GrossLoad2015[,c("Facility_ID","Facility_Name")]
New_subset <- filter(MyData.df, MyData.df$Facility_ID %in% GrossLoad2015$Facility_ID)
PlotData <- New_subset[,c("GrossLoadMWh","HeatInputMMBtu","SO2tons","NOxtons","CO2shorttons")] %>%
aggregate(by = list(New_subset$Year), FUN = sum, na.rm = TRUE)
PlotData
ggplot(data = PlotData, aes(x = Group.1)) + geom_line(aes(y = PlotData$GrossLoadMWh, colour = "GrossLoadMWh"))+ geom_line(aes(y = PlotData$HeatInputMMBtu, colour = "HeatInputMMBtu"))+ geom_line(aes(y = PlotData$SO2tons, colour = "SO2tons"))+ geom_line(aes(y = PlotData$NOxtons, colour = "NOxtons"))+ geom_line(aes(y = PlotData$CO2shorttons, colour = "CO2shorttons")) + scale_y_log10()
ggplot(data = PlotData, aes(x = Group.1, y = GrossLoadMWh)) + geom_point() + geom_path() + labs(x = "Year")
ggplot(data = PlotData, aes(x = Group.1, y = HeatInputMMBtu)) + geom_point() + geom_path() + labs(x = "Year")
ggplot(data = PlotData, aes(x = Group.1, y = SO2tons)) + geom_point() + geom_path() + labs(x = "Year")
ggplot(data = PlotData, aes(x = Group.1, y = NOxtons)) + geom_point() + geom_path() + labs(x = "Year")
ggplot(data = PlotData, aes(x = Group.1, y = CO2shorttons)) + geom_point() + geom_path() + labs(x = "Year")
Sub1_MyData <- filter(MyData.df[,c("EPARegion","GrossLoadMWh","HeatInputMMBtu","SO2tons","CO2shorttons","NOxtons")], MyData.df$Year == 2016)
Sub2_MyData <- Sub1_MyData[,c("GrossLoadMWh","HeatInputMMBtu","SO2tons","CO2shorttons","NOxtons")]
#sum(MyData.df$HeatInputMMBtu, na.rm = TRUE)
EPA_summary <- Sub2_MyData %>%
group_by(Sub1_MyData$EPARegion) %>%
summarise_all(funs(sum), na.rm = TRUE)
Chosen_EPA <- EPA_summary %>%
arrange(desc(GrossLoadMWh)) %>%
slice(1:5)
colnames(Chosen_EPA)[1] <- "EPARegion"
ggplot(data = Chosen_EPA, aes(x = reorder(EPARegion, -GrossLoadMWh), y = GrossLoadMWh)) + geom_col() + labs(x = "EPA Region")
ggplot(data = Chosen_EPA, aes(x = reorder(EPARegion, -GrossLoadMWh), y = HeatInputMMBtu)) + geom_col()+ labs(x = "EPA Region")
ggplot(data = Chosen_EPA, aes(x = reorder(EPARegion, -GrossLoadMWh), y = NOxtons)) + geom_col()+ labs(x = "EPA Region")
ggplot(data = Chosen_EPA, aes(x = reorder(EPARegion, -GrossLoadMWh), y = SO2tons)) + geom_col()+ labs(x = "EPA Region")
ggplot(data = Chosen_EPA, aes(x = reorder(EPARegion, -GrossLoadMWh), y = CO2shorttons)) + geom_col()+ labs(x = "EPA Region")
Sub3_MyData <- filter(MyData.df[,c("NERCRegion","GrossLoadMWh","HeatInputMMBtu","SO2tons","CO2shorttons","NOxtons")], MyData.df$Year == 2016)
Sub4_MyData <- Sub3_MyData[,c("GrossLoadMWh","HeatInputMMBtu","SO2tons","CO2shorttons","NOxtons")]
NERC_summary <- Sub4_MyData %>%
group_by(Sub3_MyData$NERCRegion) %>%
summarise_all(funs(sum), na.rm = TRUE) %>%
slice(1:10)
Chosen_NERC <- NERC_summary %>%
arrange(desc(GrossLoadMWh)) %>%
slice(1:5)
colnames(Chosen_NERC)[1] <- "NERCRegion"
ggplot(data = Chosen_NERC, aes(x = reorder(NERCRegion, -GrossLoadMWh), y = GrossLoadMWh)) + geom_col()+ labs(x = "NERC Region")
ggplot(data = Chosen_NERC, aes(x = reorder(NERCRegion, -GrossLoadMWh), y = HeatInputMMBtu)) + geom_col()+ labs(x = "NERC Region")
ggplot(data = Chosen_NERC, aes(x = reorder(NERCRegion, -GrossLoadMWh), y = NOxtons)) + geom_col()+ labs(x = "NERC Region")
ggplot(data = Chosen_NERC, aes(x = reorder(NERCRegion, -GrossLoadMWh), y = SO2tons)) + geom_col()+ labs(x = "NERC Region")
ggplot(data = Chosen_NERC, aes(x = reorder(NERCRegion, -GrossLoadMWh), y = CO2shorttons)) + geom_col()+ labs(x = "NERC Region")
Data_2016 <- MyData.df[,c("State","GrossLoadMWh","HeatInputMMBtu","SO2tons","CO2shorttons","NOxtons")] %>%
filter(MyData.df$Year == 2016)
Data_2016_sum <- Data_2016 %>%
group_by(State) %>%
summarise_all(funs(sum), na.rm = TRUE)
Data_2016_sum <- Data_2016_sum %>%
arrange(desc(GrossLoadMWh)) %>%
slice(1:20)
ggplot(data = Data_2016_sum, aes(x = reorder(State, -GrossLoadMWh), y = GrossLoadMWh)) + geom_col()+ labs(x = "State")
ggplot(data = Data_2016_sum, aes(x = reorder(State, -GrossLoadMWh), y = HeatInputMMBtu)) + geom_col()+ labs(x = "State")
ggplot(data = Data_2016_sum, aes(x = reorder(State, -GrossLoadMWh), y = SO2tons)) + geom_col()+ labs(x = "State")
ggplot(data = Data_2016_sum, aes(x = reorder(State, -GrossLoadMWh), y = NOxtons)) + geom_col()+ labs(x = "State")
ggplot(data = Data_2016_sum, aes(x = reorder(State, -GrossLoadMWh), y = CO2shorttons)) + geom_col()+ labs(x = "State")
Data_2016_group <- Data_2016 %>%
group_by(State) %>%
summarise_all(funs(mean), na.rm = TRUE)
Data_2016_group <- Data_2016_group %>%
arrange(desc(GrossLoadMWh)) %>%
slice(1:20)
ggplot(data = Data_2016_group, aes(x = reorder(State, -GrossLoadMWh), y = GrossLoadMWh)) + geom_col()+ labs(x = "State")
ggplot(data = Data_2016_group, aes(x = reorder(State, -GrossLoadMWh), y = HeatInputMMBtu)) + geom_col()+ labs(x = "State")
ggplot(data = Data_2016_group, aes(x = reorder(State, -GrossLoadMWh), y = SO2tons)) + geom_col()+ labs(x = "State")
ggplot(data = Data_2016_group, aes(x = reorder(State, -GrossLoadMWh), y = NOxtons)) + geom_col()+ labs(x = "State")
ggplot(data = Data_2016_group, aes(x = reorder(State, -GrossLoadMWh), y = CO2shorttons)) + geom_col()+ labs(x = "State")
Data_2016_box <- Data_2016
Data_2016_box <- Data_2016_box %>%
drop_na()
Data_2016_box <- filter(Data_2016_box, State =="TX"|State =="FL"|State =="PA"|State =="OH"|State =="IN"|State =="AL"|State =="GA"|State =="KY"|State =="IL"|State =="WV"|State =="CA"|State =="LA"|State =="NC"|State =="MO"|State =="AZ"|State =="MI"|State =="NY"|State =="OK"|State =="WI"|State =="MS")
Data_2016_box$State <- factor(Data_2016_box$State <- ordered(Data_2016_box$State, levels=c("TX","FL","PA","OH","IN","AL","GA","KY","IL","WV","CA","LA","NC","MO","AZ","MI","NY","OK","WI","MS")))
# filtering the top 20 states manually
ggplot(data = Data_2016_box, aes(x = State, y = GrossLoadMWh)) + geom_boxplot()
ggplot(data = Data_2016_box, aes(x = State, y = HeatInputMMBtu)) + geom_boxplot()
ggplot(data = Data_2016_box, aes(x = State, y = SO2tons)) + geom_boxplot()
ggplot(data = Data_2016_box, aes(x = State, y = NOxtons)) + geom_boxplot()
ggplot(data = Data_2016_box, aes(x = State, y = CO2shorttons)) + geom_boxplot()
geospat.df <- MyData.df[,c("State","Facility_ID","FacilityLongitude", "FacilityLatitude")]
geospat.df <- unique(geospat.df)      #to remove copies of the same facility
geoset <- inner_join(geospat.df,geospat.df, by = "State", copy = FALSE, suffix = c(".1",".2"))  #suffixes given to distinguish between two facilities
geoset <- filter(geoset, Facility_ID.1 != Facility_ID.2)
geoset <- mutate(geoset, dist_km := distGeo(matrix(c(FacilityLongitude.1,FacilityLatitude.1), ncol = 2),
matrix(c(FacilityLongitude.2,FacilityLatitude.2), ncol = 2))/1000) #distGeo function used to calculate distance in m. This was divided by 1000 to give distance in kilometers
geoset <- filter(geoset, dist_km != 0) #removing rows with facility distance equal to zero
geoset$dist_km <- as.numeric(geoset$dist_km) #dist_km was saved as a different data type
gr_geoset <- geoset[,c("State","dist_km")] %>%  #mean of distances taken and grouped by state
group_by(State) %>%
summarise_all(funs(mean), na.rm = TRUE)
no_plants <- aggregate(Facility_ID~State,new,length) #Creating a new dataframe grouped by state and their number of facilities
new_metric <- inner_join(gr_geoset, no_plants, by = "State") #Creating a new set with mean distance and number of plants for each state
new_metric <- mutate(new_metric, metric1 = new_metric$Facility_ID/new_metric$dist_km) #new metric created as new_metric_normalized$metric1
new_metric_normalized <- inner_join(gr_geoset, no_plants, by = "State") #new dataset created for the new metric
mu_dist <- mean(new_metric_normalized$dist_km)    #mean of distance data
sigma_dist   <- sqrt (var(new_metric_normalized$dist_km)) #standard deviation of distance data
mu_no <- mean(new_metric_normalized$Facility_ID)  #mean number of plants for a state
sigma_no   <- sqrt (var(new_metric_normalized$Facility_ID))  #standard deviation of count data
new_metric_normalized <- mutate(new_metric_normalized, metric1 = (new_metric_normalized$Facility_ID - mu_no)/sigma_no/(new_metric_normalized$dist_km-mu_dist)*sigma_dist)    #normalized metric created
arrange(new_metric,desc(metric1)) %>%     #choosing top 3 for first metric
slice(1:3)
arrange(new_metric_normalized,desc(metric1)) %>%     #choosing top 3 for the normalized metric
slice(1:3)
Data_2016 <- MyData.df[,c("State","GrossLoadMWh","HeatInputMMBtu","SO2tons","CO2shorttons","NOxtons")] %>%
filter(MyData.df$Year == 2016)
Data_2016_sum <- Data_2016 %>%
group_by(State) %>%
summarise_all(funs(sum), na.rm = TRUE)
Data_2016_sum <- Data_2016_sum %>%
arrange(desc(GrossLoadMWh)) %>%
slice(1:20)
ggplot(data = Data_2016_sum, aes(x = reorder(State, -GrossLoadMWh), y = GrossLoadMWh)) + geom_col()+ labs(x = "State")
ggplot(data = Data_2016_sum, aes(x = reorder(State, -GrossLoadMWh), y = NOxtons)) + geom_col()+ labs(x = "State")
Data_2016_group <- Data_2016 %>%
group_by(State) %>%
summarise_all(funs(mean), na.rm = TRUE)
Data_2016_group <- Data_2016_group %>%
arrange(desc(GrossLoadMWh)) %>%
slice(1:20)
ggplot(data = Data_2016_group, aes(x = reorder(State, -GrossLoadMWh), y = HeatInputMMBtu)) + geom_col()+ labs(x = "State")
ggplot(data = Data_2016_group, aes(x = reorder(State, -GrossLoadMWh), y = SO2tons)) + geom_col()+ labs(x = "State")
Data_2016_box <- Data_2016
Data_2016_box <- Data_2016_box %>%
drop_na()
Data_2016_box <- filter(Data_2016_box, State =="TX"|State =="FL"|State =="PA"|State =="OH"|State =="IN"|State =="AL"|State =="GA"|State =="KY"|State =="IL"|State =="WV"|State =="CA"|State =="LA"|State =="NC"|State =="MO"|State =="AZ"|State =="MI"|State =="NY"|State =="OK"|State =="WI"|State =="MS")
Data_2016_box$State <- factor(Data_2016_box$State <- ordered(Data_2016_box$State, levels=c("TX","FL","PA","OH","IN","AL","GA","KY","IL","WV","CA","LA","NC","MO","AZ","MI","NY","OK","WI","MS")))
# filtering the top 20 states manually
ggplot(data = Data_2016_box, aes(x = State, y = SO2tons)) + geom_boxplot()
Data_2016_box <- Data_2016
Data_2016_box <- Data_2016_box %>%
drop_na()
Data_2016_box <- filter(Data_2016_box, State =="TX"|State =="FL"|State =="PA"|State =="OH"|State =="IN"|State =="AL"|State =="GA"|State =="KY"|State =="IL"|State =="WV"|State =="CA"|State =="LA"|State =="NC"|State =="MO"|State =="AZ"|State =="MI"|State =="NY"|State =="OK"|State =="WI"|State =="MS")
Data_2016_box$State <- factor(Data_2016_box$State <- ordered(Data_2016_box$State, levels=c("TX","FL","PA","OH","IN","AL","GA","KY","IL","WV","CA","LA","NC","MO","AZ","MI","NY","OK","WI","MS")))
# filtering the top 20 states manually
ggplot(data = Data_2016_box, aes(x = State, y = CO2shorttons)) + geom_boxplot()
setwd("C:/Users/Yash Kumar/Desktop/Studies/Fall 2017/Data Analytics/Assignments/Individual Data Assignment 4/HW4-Data To USE")
library(readr)
library(stringr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(geosphere)
library(MASS)
EPADownloademissionGathered <- read_csv("C:/Users/Yash Kumar/Desktop/Studies/Fall 2017/Data Analytics/Assignments/Individual Data Assignment 4/HW4-Data To USE/EPADownloademissionGathered.csv")
EPADownloademissionGathered[ EPADownloademissionGathered == "ThisIsAnotherMissingValue" | EPADownloademissionGathered == "ThisIsAMissingValue"] <- NA
EPADownloademissionGathered$attributeName <- gsub("[[:punct:]]","",EPADownloademissionGathered$attributeName)
names(EPADownloademissionGathered) <- c("UID","State","Facility_Name","Facility_ID","Program","Year","Attribute_Name","Attribute_Value")
MyData.df <- EPADownloademissionGathered[,2:8]
MyData.df <- spread(MyData.df, Attribute_Name, Attribute_Value)
unique(EPADownloademissionGathered$Attribute_Name)
MyData.df$EPARegion <- as.factor(MyData.df$EPARegion)
MyData.df$State <- as.factor(MyData.df$State)
MyData.df$Facility_Name <- as.factor(MyData.df$Facility_Name)
MyData.df$Facility_ID <- as.factor(MyData.df$Facility_ID)
MyData.df$Program <- as.factor(MyData.df$Program)
MyData.df$County <- as.factor(MyData.df$County)
MyData.df$NERCRegion <- as.factor(MyData.df$NERCRegion)
MyData.df$Year <- as.numeric(MyData.df$Year)
MyData.df$FacilityLatitude <- as.numeric(MyData.df$FacilityLatitude)
MyData.df$FacilityLongitude <- as.numeric(MyData.df$FacilityLongitude)
MyData.df$GrossLoadMWh <- as.numeric(MyData.df$GrossLoadMWh)
MyData.df$HeatInputMMBtu <- as.numeric(MyData.df$HeatInputMMBtu)
MyData.df$NOxtons <- as.numeric(MyData.df$NOxtons)
MyData.df$SO2tons <- as.numeric(MyData.df$SO2tons)
MyData.df$SteamLoad1000lb <- as.numeric(MyData.df$SteamLoad1000lb)
MyData.df$CO2shorttons <- as.numeric(MyData.df$CO2shorttons)
summary(MyData.df[,c("State","Facility_ID","GrossLoadMWh","SO2tons","NOxtons","CO2shorttons")])
unique(MyData.df$EPARegion[!is.na(MyData.df$EPARegion)]);
length(unique(MyData.df$EPARegion[!is.na(MyData.df$EPARegion)]))
unique(MyData.df$NERCRegion[!is.na(MyData.df$NERCRegion)])
length(unique(MyData.df$NERCRegion[!is.na(MyData.df$NERCRegion)]))
new <- distinct(MyData.df,Facility_ID, State)
num <- aggregate(Facility_ID~State,new,length)
arrange(num,desc(Facility_ID)) %>%
slice(1:3)
tx <- filter(MyData.df, State=="TX", !is.na(GrossLoadMWh), !is.na(HeatInputMMBtu), !is.na(CO2shorttons), !is.na(SO2tons), !is.na(NOxtons))
mean_tx <- tx %>%
group_by(Facility_Name) %>%
summarise(GrossLoadMWh = mean(GrossLoadMWh), HeatInputMMBtu = mean(HeatInputMMBtu), CO2shorttons = mean(CO2shorttons), SO2tons = mean(SO2tons), NOxtons = mean(NOxtons))
chosen_tx <- mean_tx %>% filter((HeatInputMMBtu>quantile(HeatInputMMBtu, 0.75)) & (GrossLoadMWh>quantile(GrossLoadMWh, 0.75)) & ((SO2tons<quantile(SO2tons, 0.5)) |(CO2shorttons<quantile(CO2shorttons, 0.5))|(NOxtons<quantile(NOxtons, 0.5))))
# Checking the appropriate quantiles
chosen_tx
Sub_MyData <- MyData.df[,c("GrossLoadMWh","HeatInputMMBtu","SO2tons","CO2shorttons","NOxtons")]
Sub_MyData %>%
group_by(MyData.df$Year) %>%
summarise_all(funs(sum), na.rm = TRUE)
GrossLoad2015 <-
filter(MyData.df, Year == 2015) %>%
arrange(desc(GrossLoadMWh)) %>%
slice(1:5)
GrossLoad2015[,c("Facility_ID","Facility_Name")]
New_subset <- filter(MyData.df, MyData.df$Facility_ID %in% GrossLoad2015$Facility_ID)
PlotData <- New_subset[,c("GrossLoadMWh","HeatInputMMBtu","SO2tons","NOxtons","CO2shorttons")] %>%
aggregate(by = list(New_subset$Year), FUN = sum, na.rm = TRUE)
PlotData
ggplot(data = PlotData, aes(x = Group.1)) + geom_line(aes(y = PlotData$GrossLoadMWh, colour = "GrossLoadMWh"))+ geom_line(aes(y = PlotData$HeatInputMMBtu, colour = "HeatInputMMBtu"))+ geom_line(aes(y = PlotData$SO2tons, colour = "SO2tons"))+ geom_line(aes(y = PlotData$NOxtons, colour = "NOxtons"))+ geom_line(aes(y = PlotData$CO2shorttons, colour = "CO2shorttons")) + scale_y_log10()
ggplot(data = PlotData, aes(x = Group.1, y = GrossLoadMWh)) + geom_point() + geom_path() + labs(x = "Year")
ggplot(data = PlotData, aes(x = Group.1, y = HeatInputMMBtu)) + geom_point() + geom_path() + labs(x = "Year")
ggplot(data = PlotData, aes(x = Group.1, y = SO2tons)) + geom_point() + geom_path() + labs(x = "Year")
ggplot(data = PlotData, aes(x = Group.1, y = NOxtons)) + geom_point() + geom_path() + labs(x = "Year")
ggplot(data = PlotData, aes(x = Group.1, y = CO2shorttons)) + geom_point() + geom_path() + labs(x = "Year")
Sub1_MyData <- filter(MyData.df[,c("EPARegion","GrossLoadMWh","HeatInputMMBtu","SO2tons","CO2shorttons","NOxtons")], MyData.df$Year == 2016)
Sub2_MyData <- Sub1_MyData[,c("GrossLoadMWh","HeatInputMMBtu","SO2tons","CO2shorttons","NOxtons")]
#sum(MyData.df$HeatInputMMBtu, na.rm = TRUE)
EPA_summary <- Sub2_MyData %>%
group_by(Sub1_MyData$EPARegion) %>%
summarise_all(funs(sum), na.rm = TRUE)
Chosen_EPA <- EPA_summary %>%
arrange(desc(GrossLoadMWh)) %>%
slice(1:5)
colnames(Chosen_EPA)[1] <- "EPARegion"
ggplot(data = Chosen_EPA, aes(x = reorder(EPARegion, -GrossLoadMWh), y = GrossLoadMWh)) + geom_col() + labs(x = "EPA Region")
ggplot(data = Chosen_EPA, aes(x = reorder(EPARegion, -GrossLoadMWh), y = HeatInputMMBtu)) + geom_col()+ labs(x = "EPA Region")
ggplot(data = Chosen_EPA, aes(x = reorder(EPARegion, -GrossLoadMWh), y = NOxtons)) + geom_col()+ labs(x = "EPA Region")
ggplot(data = Chosen_EPA, aes(x = reorder(EPARegion, -GrossLoadMWh), y = SO2tons)) + geom_col()+ labs(x = "EPA Region")
ggplot(data = Chosen_EPA, aes(x = reorder(EPARegion, -GrossLoadMWh), y = CO2shorttons)) + geom_col()+ labs(x = "EPA Region")
Sub3_MyData <- filter(MyData.df[,c("NERCRegion","GrossLoadMWh","HeatInputMMBtu","SO2tons","CO2shorttons","NOxtons")], MyData.df$Year == 2016)
Sub4_MyData <- Sub3_MyData[,c("GrossLoadMWh","HeatInputMMBtu","SO2tons","CO2shorttons","NOxtons")]
NERC_summary <- Sub4_MyData %>%
group_by(Sub3_MyData$NERCRegion) %>%
summarise_all(funs(sum), na.rm = TRUE) %>%
slice(1:10)
Chosen_NERC <- NERC_summary %>%
arrange(desc(GrossLoadMWh)) %>%
slice(1:5)
colnames(Chosen_NERC)[1] <- "NERCRegion"
ggplot(data = Chosen_NERC, aes(x = reorder(NERCRegion, -GrossLoadMWh), y = GrossLoadMWh)) + geom_col()+ labs(x = "NERC Region")
ggplot(data = Chosen_NERC, aes(x = reorder(NERCRegion, -GrossLoadMWh), y = HeatInputMMBtu)) + geom_col()+ labs(x = "NERC Region")
ggplot(data = Chosen_NERC, aes(x = reorder(NERCRegion, -GrossLoadMWh), y = NOxtons)) + geom_col()+ labs(x = "NERC Region")
ggplot(data = Chosen_NERC, aes(x = reorder(NERCRegion, -GrossLoadMWh), y = SO2tons)) + geom_col()+ labs(x = "NERC Region")
ggplot(data = Chosen_NERC, aes(x = reorder(NERCRegion, -GrossLoadMWh), y = CO2shorttons)) + geom_col()+ labs(x = "NERC Region")
Data_2016 <- MyData.df[,c("State","GrossLoadMWh","HeatInputMMBtu","SO2tons","CO2shorttons","NOxtons")] %>%
filter(MyData.df$Year == 2016)
Data_2016_sum <- Data_2016 %>%
group_by(State) %>%
summarise_all(funs(sum), na.rm = TRUE)
Data_2016_sum <- Data_2016_sum %>%
arrange(desc(GrossLoadMWh)) %>%
slice(1:20)
ggplot(data = Data_2016_sum, aes(x = reorder(State, -GrossLoadMWh), y = GrossLoadMWh)) + geom_col()+ labs(x = "State")
ggplot(data = Data_2016_sum, aes(x = reorder(State, -GrossLoadMWh), y = NOxtons)) + geom_col()+ labs(x = "State")
Data_2016_group <- Data_2016 %>%
group_by(State) %>%
summarise_all(funs(mean), na.rm = TRUE)
Data_2016_group <- Data_2016_group %>%
arrange(desc(GrossLoadMWh)) %>%
slice(1:20)
ggplot(data = Data_2016_group, aes(x = reorder(State, -GrossLoadMWh), y = HeatInputMMBtu)) + geom_col()+ labs(x = "State")
ggplot(data = Data_2016_group, aes(x = reorder(State, -GrossLoadMWh), y = SO2tons)) + geom_col()+ labs(x = "State")
Data_2016_box <- Data_2016
Data_2016_box <- Data_2016_box %>%
drop_na()
Data_2016_box <- filter(Data_2016_box, State =="TX"|State =="FL"|State =="PA"|State =="OH"|State =="IN"|State =="AL"|State =="GA"|State =="KY"|State =="IL"|State =="WV"|State =="CA"|State =="LA"|State =="NC"|State =="MO"|State =="AZ"|State =="MI"|State =="NY"|State =="OK"|State =="WI"|State =="MS")
Data_2016_box$State <- factor(Data_2016_box$State <- ordered(Data_2016_box$State, levels=c("TX","FL","PA","OH","IN","AL","GA","KY","IL","WV","CA","LA","NC","MO","AZ","MI","NY","OK","WI","MS")))
# filtering the top 20 states manually
ggplot(data = Data_2016_box, aes(x = State, y = CO2shorttons)) + geom_boxplot()
geospat.df <- MyData.df[,c("State","Facility_ID","FacilityLongitude", "FacilityLatitude")]
geospat.df <- unique(geospat.df)      #to remove copies of the same facility
geoset <- inner_join(geospat.df,geospat.df, by = "State", copy = FALSE, suffix = c(".1",".2"))  #suffixes given to distinguish between two facilities
geoset <- filter(geoset, Facility_ID.1 != Facility_ID.2)
geoset <- mutate(geoset, dist_km := distGeo(matrix(c(FacilityLongitude.1,FacilityLatitude.1), ncol = 2),
matrix(c(FacilityLongitude.2,FacilityLatitude.2), ncol = 2))/1000) #distGeo function used to calculate distance in m. This was divided by 1000 to give distance in kilometers
geoset <- filter(geoset, dist_km != 0) #removing rows with facility distance equal to zero
geoset$dist_km <- as.numeric(geoset$dist_km) #dist_km was saved as a different data type
gr_geoset <- geoset[,c("State","dist_km")] %>%  #mean of distances taken and grouped by state
group_by(State) %>%
summarise_all(funs(mean), na.rm = TRUE)
no_plants <- aggregate(Facility_ID~State,new,length) #Creating a new dataframe grouped by state and their number of facilities
new_metric <- inner_join(gr_geoset, no_plants, by = "State") #Creating a new set with mean distance and number of plants for each state
new_metric <- mutate(new_metric, metric1 = new_metric$Facility_ID/new_metric$dist_km) #new metric created as new_metric_normalized$metric1
new_metric_normalized <- inner_join(gr_geoset, no_plants, by = "State") #new dataset created for the new metric
mu_dist <- mean(new_metric_normalized$dist_km)    #mean of distance data
sigma_dist   <- sqrt (var(new_metric_normalized$dist_km)) #standard deviation of distance data
mu_no <- mean(new_metric_normalized$Facility_ID)  #mean number of plants for a state
sigma_no   <- sqrt (var(new_metric_normalized$Facility_ID))  #standard deviation of count data
new_metric_normalized <- mutate(new_metric_normalized, metric1 = (new_metric_normalized$Facility_ID - mu_no)/sigma_no/(new_metric_normalized$dist_km-mu_dist)*sigma_dist)    #normalized metric created
arrange(new_metric,desc(metric1)) %>%     #choosing top 3 for first metric
slice(1:3)
arrange(new_metric_normalized,desc(metric1)) %>%     #choosing top 3 for the normalized metric
slice(1:3)
